{
  "language": "Solidity",
  "sources": {
    "contracts/PolytradeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport {FractalRegistry} from \"./FractalRegistry.sol\";\n\n/// @title Polytrade proxy\ncontract PolytradeProxy {\n    FractalRegistry registry;\n    string kycLevel;\n\n    constructor(address _registryAddr, string memory _kycLevel) {\n        registry = FractalRegistry(_registryAddr);\n        kycLevel = _kycLevel;\n    }\n\n    function hasPassedKYC(address addr) public view returns (bool) {\n        return registry.isUserInList(registry.getFractalId(addr), kycLevel);\n    }\n}\n"
    },
    "contracts/FractalRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Fractal registry v0\n/// @author Antoni Dikov and Shelby Doolittle\ncontract FractalRegistry {\n    address root;\n    mapping(address => bool) public delegates;\n\n    mapping(address => bytes32) fractalIdForAddress;\n    mapping(string => mapping(bytes32 => bool)) userLists;\n\n    constructor(address _root) {\n        root = _root;\n    }\n\n    /// @param addr is Eth address\n    /// @return FractalId as bytes32\n    function getFractalId(address addr) external view returns (bytes32) {\n        return fractalIdForAddress[addr];\n    }\n\n    /// @notice Adds a user to the mapping of Eth address to FractalId.\n    /// @param addr is Eth address.\n    /// @param fractalId is FractalId in bytes32.\n    function addUserAddress(address addr, bytes32 fractalId) external {\n        requireMutatePermission();\n        fractalIdForAddress[addr] = fractalId;\n    }\n\n    /// @notice Removes an address from the mapping of Eth address to FractalId.\n    /// @param addr is Eth address.\n    function removeUserAddress(address addr) external {\n        requireMutatePermission();\n        delete fractalIdForAddress[addr];\n    }\n\n    /// @notice Checks if a user by FractalId exists in a specific list.\n    /// @param userId is FractalId in bytes32.\n    /// @param listId is the list id.\n    /// @return bool if the user is the specified list.\n    function isUserInList(bytes32 userId, string memory listId)\n        external\n        view\n        returns (bool)\n    {\n        return userLists[listId][userId];\n    }\n\n    /// @notice Add user by FractalId to a specific list.\n    /// @param userId is FractalId in bytes32.\n    /// @param listId is the list id.\n    function addUserToList(bytes32 userId, string memory listId) external {\n        requireMutatePermission();\n        userLists[listId][userId] = true;\n    }\n\n    /// @notice Remove user by FractalId from a specific list.\n    /// @param userId is FractalId in bytes32.\n    /// @param listId is the list id.\n    function removeUserFromList(bytes32 userId, string memory listId) external {\n        requireMutatePermission();\n        delete userLists[listId][userId];\n    }\n\n    /// @notice Only root can add delegates. Delegates have mutate permissions.\n    /// @param addr is Eth address\n    function addDelegate(address addr) external {\n        require(msg.sender == root, \"Must be root\");\n        delegates[addr] = true;\n    }\n\n    /// @notice Removing delegates is only posible from root or by himself.\n    /// @param addr is Eth address\n    function removeDelegate(address addr) external {\n        require(\n            msg.sender == root || msg.sender == addr,\n            \"Not allowed to remove address\"\n        );\n        delete delegates[addr];\n    }\n\n    function requireMutatePermission() private view {\n        require(\n            msg.sender == root || delegates[msg.sender],\n            \"Not allowed to mutate\"\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}